package de.ovgu.dke.clustering.algorithm.competitive;

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Random;
import java.util.Map.Entry;

import de.ovgu.dke.clustering.util.DatasetSampler;
import de.ovgu.dke.clustering.util.DatasetSamplerType;
import de.ovgu.dke.clustering.util.PrototypeInitializer;
import de.ovgu.dke.clustering.util.PrototypeInitialzerType;
import de.ovgu.dke.graph.GraphConnectivityAlgorithm;
import de.ovgu.dke.util.CSVObjectSet;
import de.ovgu.dke.util.DistanceMeasure;
import de.ovgu.dke.util.MathUtil;
import de.ovgu.dke.util.ObjectSet;
import de.ovgu.dke.util.ObjectWrapper;
import de.ovgu.dke.util.Parameter;
import de.ovgu.dke.util.Settings;
import de.ovgu.dke.util.SimpleObjectSet;
import de.ovgu.dke.util.SimpleObjectWrapper;

public class GrowingCellStructureAlgorithm implements GraphCompetitiveLearningAlgorithm
{	
	public static enum PruningStrategy { MaximumDistantPruning, LowDensityPruning } 
	
	private final static Settings DEFAULT_SETTINGS = new Settings();
	
	private static Settings DEFAULT_PROTOTYPE_INITIALIZER_SETTINGS = new Settings();
	
	private static Settings DEFAULT_DATASET_SAMPLER_SETTINGS = new Settings();
	
	private final static DistanceMeasure DEFAULT_METRIC = DistanceMeasure.EUCLIDEAN;
	
	{
		DEFAULT_PROTOTYPE_INITIALIZER_SETTINGS.setParameter(new Parameter("seed", Integer.toString(1)));
		
		DEFAULT_DATASET_SAMPLER_SETTINGS.setParameter(new Parameter("seed", Integer.toString(1)));
		
		DEFAULT_SETTINGS.setParameter(new Parameter("lambdaInsert", Integer.toString(150)));
		DEFAULT_SETTINGS.setParameter(new Parameter("lambdaPruning", Integer.toString(400)));
		DEFAULT_SETTINGS.setParameter(new Parameter("beta", Double.toString(0.0008d)));
		DEFAULT_SETTINGS.setParameter(new Parameter("eta", Double.toString(0.005d)));
		DEFAULT_SETTINGS.setParameter(new Parameter("pruningStrategy", PruningStrategy.MaximumDistantPruning.name()));
		DEFAULT_SETTINGS.setParameter(new Parameter("learnRateWinner", Double.toString(0.05d)));
		DEFAULT_SETTINGS.setParameter(new Parameter("learnRateNeighbor", Double.toString(0.006d)));
		DEFAULT_SETTINGS.setParameter(new Parameter("maxVertices", Integer.toString(Integer.MAX_VALUE)));
		DEFAULT_SETTINGS.setParameter(new Parameter("maxEpochs", Integer.toString(10)));
		DEFAULT_SETTINGS.setParameter(new Parameter("errorMinimizing", Boolean.toString(true)));
		Parameter p = new Parameter("prototypeInitType", PrototypeInitialzerType.RandomExample.name());
		p.setSettings(DEFAULT_PROTOTYPE_INITIALIZER_SETTINGS);
		DEFAULT_SETTINGS.setParameter(p);
		p = new Parameter("samplingType", DatasetSamplerType.ConstantEpoch.name());
		p.setSettings(DEFAULT_PROTOTYPE_INITIALIZER_SETTINGS);
		DEFAULT_SETTINGS.setParameter(p);
	}
	
	private DistanceMeasure metric;
	
	private boolean errorMinimizing;
	
	private int lambdaInsert;
	
	private int lambdaPruning;
	
	private double beta;
	
	private double eta;
	
	private PruningStrategy pruningStrategy;
	
	private double learnRateWinner;
	
	private double learnRateNeighbor;
	
	private int maxVertices;
	
	private int maxEpochs;
	
	private int vertexIdGenerator;
	
	private PrototypeInitialzerType prototypeInitType;
	private Settings prototypeInitializerSetting;
	
	private DatasetSamplerType samplingType;
	private Settings datasetSamplerSetting;
	
	
	//private int dimension;
	
	public GrowingCellStructureAlgorithm()
	{
		applyDefaultSettings();
	}
	
	
	public CompetitiveGraph learn(ObjectSet dataset) 
	{
		PrototypeInitializer pInitializer = 
			PrototypeInitialzerType.createPrototypeInitializer(prototypeInitType, dataset, prototypeInitializerSetting);
		DatasetSampler sampler = DatasetSamplerType.createDatasetsampler(samplingType, dataset, maxEpochs);
		sampler.applySettings(datasetSamplerSetting);
		
		CompetitiveGraph graph = initGraph(pInitializer);
		compute(graph, sampler);
		return graph;
	}
	
	public CompetitiveGraph relearn(CompetitiveGraph graph, ObjectSet dataset)
	{
		DatasetSampler sampler = DatasetSamplerType.createDatasetsampler(samplingType, dataset, maxEpochs);
		sampler.applySettings(datasetSamplerSetting);
		compute(graph, sampler);
		return graph;
	}

	public void applyDefaultSettings() 
	{
		applySettings(DEFAULT_SETTINGS);
		metric = DEFAULT_METRIC;
	}

	public void applySettings(Settings settings)
	{
		if(settings != null) {
			Parameter p = settings.getParameter("lambdaInsert");
			if(p!=null)
				setInsertionStepSize(Integer.valueOf(p.getValue()));
			
			p = settings.getParameter("lambdaPruning");
			if(p!=null)
				setPruningStepSize(Integer.valueOf(p.getValue()));
			
			
			p = settings.getParameter("beta");
			if(p!=null)
				setParameterDecayRate(Double.valueOf(p.getValue()));
			
			p = settings.getParameter("errorMinimizing");
			if(p!=null)
				setErrorMinimizing(Boolean.valueOf(p.getValue()));
			
			p = settings.getParameter("eta");
			if(p!=null)
				setPruningThreshold(Double.valueOf(p.getValue()));
			
			p = settings.getParameter("pruningStrategy");
			if(p!=null) 
				setPruningStrategy(PruningStrategy.valueOf(p.getValue()));
			
			p = settings.getParameter("learnRateWinner");
			if(p!=null)
				setLearningRateWinner(Double.valueOf(p.getValue()));
			
			p = settings.getParameter("learnRateNeighbor");
			if(p!=null)
				setLearningRateNeighbor(Double.valueOf(p.getValue()));
			
			p = settings.getParameter("maxEpochs");
			if(p!=null)
				setMaxEpochs(Integer.valueOf(p.getValue()));
			
			p = settings.getParameter("maxVertices");
			if(p!=null)
				setMaxNVertices(Integer.valueOf(p.getValue()));
			
			p = settings.getParameter("prototypeInitType");
			if(p!=null) 
				setPrototypeInitializerType(PrototypeInitialzerType.valueOf(p.getValue()), p.getSettings());

			p = settings.getParameter("samplingType");
			if(p!=null) 
				setSamplingType(DatasetSamplerType.valueOf(p.getValue()), p.getSettings());

		}
			
		
	}

	public Settings getDefaultSettings() 
	{
		return DEFAULT_SETTINGS;
	}

	public Settings getSettings() 
	{
		Settings settings = new Settings();
		
		settings.setParameter(new Parameter("lambdaInsert", Integer.toString(lambdaInsert)));
		settings.setParameter(new Parameter("lambdaPruning", Integer.toString(lambdaPruning)));
		settings.setParameter(new Parameter("beta", Double.toString(beta)));
		settings.setParameter(new Parameter("eta", Double.toString(eta)));
		settings.setParameter(new Parameter("pruningStrategy", pruningStrategy.name()));
		settings.setParameter(new Parameter("errorMinimizing", Boolean.toString(errorMinimizing)));
		settings.setParameter(new Parameter("learnRateWinner", Double.toString(learnRateWinner)));
		settings.setParameter(new Parameter("learnRateNeighbor", Double.toString(learnRateNeighbor)));
		settings.setParameter(new Parameter("maxVertices", Integer.toString(maxVertices)));
		settings.setParameter(new Parameter("maxEpochs", Integer.toString(maxEpochs)));
		Parameter p = new Parameter("prototypeInitType", prototypeInitType.name());
		p.setSettings(prototypeInitializerSetting);
		settings.setParameter(p);
		p = new Parameter("samplingType", samplingType.name());
		p.setSettings(datasetSamplerSetting);
		settings.setParameter(p);
		return settings;
	}
	
	
	public int getInsertionStepSize()
	{
		return lambdaInsert;
	}
	
	public void setInsertionStepSize(int lambda)
	{
		lambdaInsert = lambda;
	}
	
	public int getPruningStepSize()
	{
		return lambdaPruning;
	}
	
	public void setPruningStepSize(int lambda)
	{
		lambdaPruning = lambda;
	}
	
	public double getParameterDecayRate()
	{
		return beta;
	}
	
	
	public void setParameterDecayRate(double beta)
	{
		if(Double.isNaN(beta) || Double.isInfinite(beta) || beta < 0d || beta > 1d)
			throw new IllegalArgumentException("beta must be in the intervall [0,1]");
		this.beta = beta;
	}
	
	public double getPruningThreshold()
	{
		return eta;
	}
	
	public void setPruningThreshold(double eta)
	{
		if(Double.isNaN(eta) || Double.isInfinite(eta) || eta < 0d || eta > 1d)
			throw new IllegalArgumentException("eta must be in the intervall [0,1]");
		this.eta = eta;
	}
	
	public PruningStrategy getPruningStrategy()
	{
		return pruningStrategy;
	}
	
	public void setPruningStrategy(PruningStrategy strategy)
	{
		if(strategy == null)
			throw new NullPointerException();
		pruningStrategy = strategy;
	}
	
	public double getLearningRateWinner()
	{
		return learnRateWinner;
	}
	
	public void setLearningRateWinner(double lr)
	{
		if(Double.isNaN(lr) || Double.isInfinite(lr) || lr < 0d || lr > 1d)
			throw new IllegalArgumentException("lr must be in the intervall [0,1]");
		learnRateWinner = lr;
	}
	
	public double getLearningRateNeighbor()
	{
		return learnRateNeighbor;
	}
	
	public void setLearningRateNeighbor(double lr)
	{
		if(Double.isNaN(lr) || Double.isInfinite(lr) || lr < 0d || lr > 1d)
			throw new IllegalArgumentException("lr must be in the intervall [0,1]");
		learnRateNeighbor = lr;
	}
	
	public int getMaxNVertices()
	{
		return maxVertices;
	}
	
	public void setMaxNVertices(int n)
	{
		if(n < 1)
			throw new IllegalArgumentException("n must be a positive integer");
		maxVertices = n;
	}
	
	public int getMaxEpochs()
	{
		return maxEpochs;
	}
	
	public void setMaxEpochs(int n)
	{
		if(n < 1)
			throw new IllegalArgumentException("n must be a positive integer");
		maxEpochs = n;
	}
	
	public boolean getErrorMinimizing()
	{
		return errorMinimizing;
	}
	
	public void setErrorMinimizing(boolean b)
	{
		errorMinimizing = b;
	}
	
	public DatasetSamplerType getSamplingType()
	{
		return samplingType;
	}
	
	public Settings getSamplingSetting()
	{
		return datasetSamplerSetting;
	}
	
	public void setSamplingType(DatasetSamplerType type, Settings setting)
	{
		if(type == null)
			throw new NullPointerException();
		samplingType = type;
		datasetSamplerSetting = setting;
	}
	
	public PrototypeInitialzerType getPrototypeInitializerType()
	{
		return prototypeInitType;
	}
	
	public Settings getPrototypeInitializerSetting()
	{
		return prototypeInitializerSetting;
	}
	
	public void setPrototypeInitializerType(PrototypeInitialzerType type, Settings setting)
	{
		if(type == null)
			throw new NullPointerException();
		prototypeInitType = type;
		prototypeInitializerSetting = setting;
	}
	
	public DistanceMeasure getMetric()
	{
		return metric;
	}
	
	public void setMetric(DistanceMeasure metric)
	{
		if(metric == null)
			throw new NullPointerException();
		this.metric = metric;
	}
	
	private final void compute(CompetitiveGraph graph, DatasetSampler sampler)
	{
		
		int iteration = 1;
		int epochCnt =-1;
		while(sampler.hasNext() && graph.numberOfVertices()<maxVertices)
		{
	/*		if(sampler.epoch() != epochCnt)
			{
				System.out.println("=====================");
				System.out.println("epoch=" + epochCnt);
				System.out.println("meanE=" + graph.meanError());
				System.out.println("maxE=" + graph.maxError());
				System.out.println("minE=" + graph.minError());
				System.out.println("totalE=" + graph.totalError(sampler.getDataset(), metric));
				System.out.println("avgDist=" + graph.avgDistance(metric));
				System.out.println("minDist=" + graph.minDistance(metric));
				System.out.println("maxDist=" + graph.maxDistance(metric));
				System.out.println("=====================");
				
				epochCnt++;
			}*/
			//1. generate an input signal
			double[] input = sampler.next().getRepresentation();
			
			//2. locate the best matching unit 
			double minDist = Double.POSITIVE_INFINITY;
			CompetitiveVertex winner = null;
			for(Iterator<CompetitiveVertex> it = graph.vertices(); it.hasNext(); )
			{
				CompetitiveVertex candidate = it.next();
				double dist = metric.getDistance(input, candidate.getWeightVector());
				if(dist < minDist) {
					minDist = dist;
					winner	= candidate;
				}
			}
		//	System.out.println("dist " +minDist);
			
			//3. adapt the weight vectors of the winner and its direct topological 
			//neighbors and increment the age of all edges eminating from winner
			winner.adapt(learnRateWinner, input);
			for(Iterator<CompetitiveEdge> eIt = graph.incidentEdges(winner); eIt.hasNext(); )
			{
				CompetitiveEdge edge = eIt.next();
				CompetitiveVertex v = edge.getOpposite(winner);
				v.adapt(learnRateNeighbor, input);
			}
			
			//4.increment signal counters and error variable
			winner.incrementSignalCounter();
			winner.addError(MathUtil.square(minDist));
			//winner.addError(minDist);
			
			//5. If the number of input signals generated so far is
            //an integer multiple of lambda, insert a new unit
			if(iteration%lambdaInsert == 0) {
				
				//A. determine the vertex q with the highest resource value
				double qValue = Double.NEGATIVE_INFINITY;
				CompetitiveVertex q = null;
				for(Iterator<CompetitiveVertex> it = graph.vertices(); it.hasNext(); )
				{
					CompetitiveVertex candidate = it.next();
					double val = (errorMinimizing) ? candidate.getError() : candidate.getSignalCounter();
					if(val > qValue) {
						qValue = val;
						q = candidate;
					}
				}
				
				//B. determine the furthest-distant neighbor of the vertex with the highest ressource value
				double maxDist = Double.NEGATIVE_INFINITY;
				CompetitiveVertex f = null;;
				Collection<CompetitiveVertex> qNeighbors = graph.getNeighbors(q);
				for(CompetitiveVertex candidate : qNeighbors)
				{
					double dist = metric.getDistance(candidate.getWeightVector(), q.getWeightVector());
					if(dist>maxDist) {
						maxDist = dist;
						f = candidate;
					}
				}
				
				//C. determine shared neighbors of q and f
				Collection<CompetitiveVertex> fNeighbors = graph.getNeighbors(f);
				Collection<CompetitiveVertex> sharedNeighbors = MathUtil.intersection(qNeighbors, fNeighbors);
				
				//D. create a new vector r by interpolating the weight vectors of q and f
				//double[] weightVec = CompetitiveUtil.interpolate(q.getWeightVector(), f.getWeightVector());
				double interpolWeight = q.getSignalCounter()/(q.getSignalCounter()+f.getSignalCounter());
				double[] weightVec = CompetitiveUtil.interpolate(q.getWeightVector(), f.getWeightVector(),interpolWeight);
				CompetitiveVertex r = createVertex(weightVec);
				
				//E. insert new vertex r
				Collection<CompetitiveSimplex> removeSimplices = new LinkedList<CompetitiveSimplex>();
				for(Iterator<CompetitiveSimplex> sIt = graph.simplices(); sIt.hasNext(); )
				{
					CompetitiveSimplex simplex = sIt.next();
					if(simplex.contains(q) && simplex.contains(f)) 
						removeSimplices.add(simplex);
				}
				for(CompetitiveVertex candidate : sharedNeighbors)
				{
					graph.addSimplex(new CompetitiveSimplex(r, q, candidate));
					graph.addSimplex(new CompetitiveSimplex(r, f, candidate));
				}
				for(CompetitiveSimplex simplex : removeSimplices)
					graph.removeSimplex(simplex);
				
				
				//F. decrease the resource values of the r-neighborhood
				double totalError = 0d;
				double totalSC = 0d;
				//System.out.println("q = " + q + "\tf =" + f + "\tr = " + r);
				//System.out.println("shared n=" + sharedNeighbors.size());
				//System.out.println("rem simplex n=" + removeSimplices.size());
				Collection<CompetitiveVertex> rNeighbors = graph.getNeighbors(r);
				int cardNeighbors = rNeighbors.size();
				for(CompetitiveVertex candidate : rNeighbors)
				{
					double sc 	 = candidate.getSignalCounter();
					double error = candidate.getError();
					sc 	  -= sc/cardNeighbors;
					error -= error/cardNeighbors;
					candidate.setSignalCounter(sc);
					candidate.setError(error);
					
					totalSC	   += sc;
					totalError += error;
				}
				r.setError(totalError/cardNeighbors);
				r.setSignalCounter(totalSC/cardNeighbors);
			}
			
			//6. pruning phase
			if(iteration%lambdaPruning == 0) {
				if(pruningStrategy == PruningStrategy.MaximumDistantPruning)
					maximalDistantPruningStrategy(graph);
				else {
					lessDensityPruningStrategy(graph, eta);
				}
			}
			
			//7. decrease signal counters and error variable by alpha
			for(Iterator<CompetitiveVertex> it = graph.vertices(); it.hasNext(); )
			{
				CompetitiveVertex candidate = it.next();
				candidate.decreaseError(beta);
				candidate.decreaseSignalCounter(beta);
			}
			
			iteration++;
			
		}
		System.out.println(iteration);
		
	}
	
	
	private final CompetitiveGraph initGraph(PrototypeInitializer pInitializer)
	{
		CompetitiveGraph graph = new CompetitiveGraph();
		vertexIdGenerator = 0;
		CompetitiveVertex x = createVertex(pInitializer.nextVector());
		CompetitiveVertex y = createVertex(pInitializer.nextVector());
		CompetitiveVertex z = createVertex(pInitializer.nextVector());
		CompetitiveSimplex simplex = new CompetitiveSimplex(x,y,z);
		graph.addSimplex(simplex);
		return graph;
	}
	
	private final CompetitiveVertex createVertex(double[] v)
	{
		return new CompetitiveVertex(vertexIdGenerator++, v);
	}
	
	private final void maximalDistantPruningStrategy(CompetitiveGraph graph)
	{
		if(graph.numberOfVertices() > 3) {
			//A. determine removal candidate (check whether this is the original method)
			CompetitiveVertex candidate = null;
			double maxMeanDist = Double.NEGATIVE_INFINITY;
			for(Iterator<CompetitiveVertex> vIt = graph.vertices(); vIt.hasNext(); )
			{
				CompetitiveVertex vertex = vIt.next();
				Collection<CompetitiveVertex> neighbors = graph.getNeighbors(vertex);
				double meanDist = 0d;
				for(CompetitiveVertex neighbor : neighbors) 
					meanDist += metric.getDistance(vertex.getWeightVector(), neighbor.getWeightVector());
				meanDist /= neighbors.size();
				if(meanDist > maxMeanDist) {
					maxMeanDist	 = meanDist;
					candidate = vertex;
				}
			}
			
			removeCandidate(candidate, graph);
		}
	}
	
	private final void lessDensityPruningStrategy(CompetitiveGraph graph, double pruningThreshold)
	{
		if(graph.numberOfVertices() > 3) {
			double totalSC = 0d;
			HashMap<CompetitiveVertex, Double> avgEdgeDistances = new HashMap<CompetitiveVertex, Double>(graph.numberOfVertices());
			for(Iterator<CompetitiveVertex> vIt = graph.vertices(); vIt.hasNext(); )
			{
				CompetitiveVertex v = vIt.next();
				totalSC += v.getSignalCounter();
				Collection<CompetitiveVertex> neighbors = graph.getNeighbors(v);
				double meanDist = 0d;
				for(CompetitiveVertex neighbor : neighbors) 
					meanDist += metric.getDistance(v.getWeightVector(), neighbor.getWeightVector());
				avgEdgeDistances.put(v, meanDist/neighbors.size());
			}
			
			double totalDensity = 0d;
			for(Iterator<CompetitiveVertex> vIt = graph.vertices(); vIt.hasNext(); )
			{
				CompetitiveVertex v = vIt.next();
				totalDensity += v.getSignalCounter()/(totalSC*avgEdgeDistances.get(v));
			}
			
			LinkedList<CompetitiveVertex> remCandidates = new LinkedList<CompetitiveVertex>();
			for(Iterator<CompetitiveVertex> vIt = graph.vertices(); vIt.hasNext(); )
			{
				CompetitiveVertex v = vIt.next();
				double p = v.getSignalCounter()/(totalSC*avgEdgeDistances.get(v));
				p /= totalDensity;
				//System.out.println(v + "\t"+ p);
				if(p < pruningThreshold)
					remCandidates.add(v);
			}
			
			//TODO sorting the candidates by their density estimation
			for(CompetitiveVertex candidate : remCandidates)
			{
				removeCandidate(candidate, graph);
				if(graph.numberOfVertices()<=3)
					break;
			}
		}
	}
	
	
	private final void removeCandidate(CompetitiveVertex candidate, CompetitiveGraph graph)
	{
		//mark the simplices for removal that contains the candidate vertex
		Collection<CompetitiveSimplex> removeSimplices = new LinkedList<CompetitiveSimplex>();
		for(Iterator<CompetitiveSimplex> sIt = graph.simplices(); sIt.hasNext(); )
		{
			CompetitiveSimplex simplex = sIt.next();
			if(simplex.contains(candidate)) 
				removeSimplices.add(simplex);
		}
		
		//remove the marked simplices for removal
		if(removeSimplices.size() < graph.numberOfSimplices()) {
			for(CompetitiveSimplex simplex : removeSimplices) 
			{
				graph.removeSimplex(simplex);
				if(graph.numberOfVertices()<=3)
					break;
			}
		}
		
		//check for inconsistency (shouldn't occur)
		if(graph.numberOfVertices()<3) {
			while(graph.numberOfVertices()<3) {
				//create random vertex
			}
			CompetitiveVertex[] vertices = new CompetitiveVertex[3];
			int i=0;
			for(Iterator<CompetitiveVertex> vIt1 = graph.vertices(); vIt1.hasNext(); )
			{
				vertices[i] = vIt1.next();
				for(Iterator<CompetitiveVertex> vIt2 = graph.vertices(); vIt2.hasNext(); )
					graph.addEdge(new CompetitiveEdge(vertices[i], vIt2.next()));
			}
			graph.addSimplex(new CompetitiveSimplex(vertices));
		}
	}
	
	public static void main(String args[])
	{
		//ObjectSet dataset = createDataset(500);
		try {
		ObjectSet dataset = new CSVObjectSet("/home/grenouille/irg_workspace/datasets/3d_gaussian_clusters.csv", "class");
		GrowingCellStructureAlgorithm algo = new GrowingCellStructureAlgorithm();
		long time = System.currentTimeMillis();
		CompetitiveGraph graph = algo.learn(dataset);
		System.out.println("time:" + (System.currentTimeMillis()-time));
		System.out.println("v:"+graph.numberOfVertices());
		System.out.println("e:"+graph.numberOfEdges());
		GraphConnectivityAlgorithm<CompetitiveGraph> connectAlgo = new GraphConnectivityAlgorithm<CompetitiveGraph>();
		connectAlgo.process(graph);
		Iterator<CompetitiveGraph> components = connectAlgo.components();
		while(components.hasNext())
		{
			System.out.println("graph:");
			System.out.println(components.next());
		}
		System.out.println(connectAlgo.numberOfComponents());
		printGraphStats(graph);
		printFinalAssignments(graph, dataset);
		printClassDistribution(graph, dataset);
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void printClassDistribution(CompetitiveGraph graph, ObjectSet dataset)
	{
		HashMap<CompetitiveVertex, HashMap<String,Integer>> assignments = new HashMap<CompetitiveVertex, HashMap<String,Integer>>();
		for(Iterator<CompetitiveVertex> it=graph.vertices(); it.hasNext(); )
			assignments.put(it.next(), new HashMap<String, Integer>());
		
		for(int i=0; i<dataset.size(); i++)
		{
			String label = dataset.get(i).getClassLabel();
			CompetitiveVertex v = findNearestVertex(dataset.get(i).getRepresentation(), graph);
			HashMap<String, Integer> distr = assignments.get(v);
			Integer freq = distr.get(label);
			if(freq == null)
				distr.put(label, 1);
			else
				distr.put(label, freq+1);
		}
		
		System.out.println("\ndistribution " );
		for(Entry<CompetitiveVertex, HashMap<String, Integer>> nodeEntry : assignments.entrySet())
		{
			System.out.print(nodeEntry.getKey()+": ");
			for(Entry<String, Integer> freqEntry : nodeEntry.getValue().entrySet())
				System.out.print(freqEntry.getKey()+"="+freqEntry.getValue()+"\t");
			System.out.println();
		}
	}
	
	
	public static void printGraphStats(CompetitiveGraph graph)
	{
		for(Iterator<CompetitiveVertex> it=graph.vertices(); it.hasNext(); )
		{
			CompetitiveVertex v = it.next();
			System.out.println(v + ": e: " + v.getError() + " sc:" + v.getSignalCounter());// + " weight: " +  Arrays.toString(v.getWeightVector()));
		}
	}
	
	public static void printFinalAssignments(CompetitiveGraph graph, ObjectSet dataset)
	{
		HashMap<CompetitiveVertex, Integer> assignments = new HashMap<CompetitiveVertex, Integer>();
		for(Iterator<CompetitiveVertex> it=graph.vertices(); it.hasNext(); )
			assignments.put(it.next(), 0);
		
		for(int i=0; i<dataset.size(); i++)
		{
			CompetitiveVertex v = findNearestVertex(dataset.get(i).getRepresentation(), graph);
			assignments.put(v, assignments.get(v)+1);
		}
		
		for(Entry<CompetitiveVertex, Integer> e : assignments.entrySet())
			System.out.println(e.getKey() +": " + e.getValue());
	}
	
	public static CompetitiveVertex findNearestVertex(double[] input, CompetitiveGraph graph)
	{
		double minDist = Double.POSITIVE_INFINITY;
		CompetitiveVertex v = null;
		for(Iterator<CompetitiveVertex> it=graph.vertices(); it.hasNext(); )
		{
			CompetitiveVertex candidate = it.next();
			double dist = DistanceMeasure.EUCLIDEAN.getDistance(input, candidate.getWeightVector());
			if(dist<minDist) {
				minDist = dist;
				v = candidate;
			}
		}
		return v;
	}
	
	public static ObjectSet createDataset(int n)
	{
		Random rnd = new Random(1);
		ObjectWrapper[] wrapper = new ObjectWrapper[n];
		for(int i=0; i<100; i++)
			wrapper[i] = new SimpleObjectWrapper(null, new double[] {(rnd.nextDouble()*20d), rnd.nextDouble()*20d, rnd.nextDouble()*20d, rnd.nextDouble()*20d});
		for(int i=100; i<350; i++)
			wrapper[i] = new SimpleObjectWrapper(null, new double[] {(rnd.nextDouble()*20d+40d), rnd.nextDouble()*20d+40d, rnd.nextDouble()*20d+40d, rnd.nextDouble()*20d+40d});

		for(int i=350; i<n; i++)
			wrapper[i] = new SimpleObjectWrapper(null, new double[] {(rnd.nextDouble()*20d+20d), rnd.nextDouble()*20d+20d, rnd.nextDouble()*20d, rnd.nextDouble()*20d+20d});

		return new SimpleObjectSet(wrapper);
	}
}
